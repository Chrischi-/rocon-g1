var fs=require("fs"),buffer=require("buffer"),util=require("util"),bone=require("bonescript").bone.pins,debug=!1;if(buffer.Buffer.prototype.readUint16BE||(buffer.Buffer.prototype.readUint16BE=function(a){var b=0;return b=this[a]<<8,b|=this[a+1]}),!buffer.Buffer.prototype.hexSlice){var toHex=function(a){return 16>a?"0"+a.toString(16):a.toString(16)};buffer.Buffer.prototype.hexSlice=function(a,b){var c=this.length;(!a||0>a)&&(a=0),(!b||0>b||b>c)&&(b=c);for(var d="",e=a;b>e;e++)d+=toHex(this[e]);return d}}buffer.Buffer.prototype.writeUint16BE||(buffer.Buffer.prototype.writeUint16BE=function(a,b){this[b]=(65280&a)>>>8,this[b+1]=255&a}),buffer.Buffer.prototype.fill||(buffer.Buffer.prototype.fill=function(a,b,c){a||(a=0),b||(b=0),c||(c=this.length);for(var d=b;c>d;d++)this[d]=a}),buffer.Buffer.prototype.hexWrite||(buffer.Buffer.prototype.hexWrite=function(a,b,c){b=+b||0;var d=this.length-b;c?(c=+c,c>d&&(c=d)):c=d;var e=a.length;if(e%2)throw new Error("Invalid hex string");c>e/2&&(c=e/2);for(var f=0;c>f;f++){var g=parseInt(a.substr(2*f,2),16);if(isNaN(g))throw new Error("Invalid hex string");this[b+f]=g}return f});var eepromData=new buffer.Buffer(400),readEeproms=exports.readEeproms=function(a){var b={};for(var c in a){var d=fetchEepromData(c),e=null;d&&("bone"==a[c].type?(e=parseMainEeprom(d),e&&(e.type="bone")):(e=parseCapeEeprom(d),e&&(e.type="cape")),e&&(b[c]=e))}return b},fetchEepromData=exports.fetchEepromData=function(a){try{var b=fs.openSync(a,"r");return fs.readSync(b,eepromData,0,400,0),eepromData}catch(c){return console.info("Unable to open EEPROM at "+a+": "+c),null}},parseMainEeprom=function(a){var b={};return b.header=a.hexSlice(0,4),"aa5533ee"!=b.header?(console.error("Unknown EEPROM format: "+b.header),null):(b.boardName=a.toString("ascii",4,12).trim().replace(/^\x00+|\x00+$/g,""),b.version=a.toString("ascii",12,16).trim().replace(/^\x00+|\x00+$/g,""),b.serialNumber=a.toString("ascii",16,28).trim().replace(/^\x00+|\x00+$/g,""),b.configOption=a.hexSlice(28,60),b)},parseCapeEeprom=exports.parseCapeEeprom=function(a){var b={};if(b.header=a.hexSlice(0,4),"aa5533ee"!=b.header)return console.error("Unknown EEPROM format: "+b.header),null;if(b.formatRev=a.toString("ascii",4,6),"A0"!=b.formatRev)return console.error("Unknown EEPROM format revision: "+b.formatRev),null;b.boardName=a.toString("ascii",6,38).trim().replace(/^\x00+|\x00+$/g,""),b.version=a.toString("ascii",38,42).trim().replace(/^\x00+|\x00+$/g,""),b.manufacturer=a.toString("ascii",42,58).trim().replace(/^\x00+|\x00+$/g,""),b.partNumber=a.toString("ascii",58,74).trim().replace(/^\x00+|\x00+$/g,""),b.numPins=a.readUint16BE(74),b.serialNumber=a.toString("ascii",76,88).trim().replace(/^\x00+|\x00+$/g,""),b.currentVDD_3V3EXP=a.readUint16BE(236),b.currentVDD_5V=a.readUint16BE(238),b.currentSYS_5V=a.readUint16BE(240),b.DCSupplied=a.readUint16BE(242),b.additional=a.toString("ascii",244,400).trim().replace(/^\x00+|\x00+$/g,""),b.mux={};for(pin in bone)if(bone[pin].eeprom){var c=2*bone[pin].eeprom+88,d=a.readUint16BE(c),e={},f=(32768&d)>>15;if(f||debug){e.used=f?"used":"available",debug&&(e.data=a.hexSlice(c,c+2));var g=(24576&d)>>13;switch(g){case 1:e.direction="in";break;case 2:e.direction="out";break;case 3:e.direction="bidir"}e.slew=64&d?"slow":"fast",e.rx=32&d?"enabled":"disabled";var h=(24&d)>>3;switch(h){case 1:e.pullup="disabled";break;case 2:e.pullup="pullup";break;case 0:e.pullup="pulldown";break;case 3:default:console.error("Unknown pullup value: "+h)}e.mode=7&d;try{var i=fs.readFileSync("/sys/kernel/debug/omap_mux/"+bone[pin].mux,"ascii");e["function"]=i.split("\n")[2].split("|")[e.mode].replace("signals:","").trim()}catch(j){}b.mux[pin]=e}}return b},fillCapeEepromData=exports.fillCapeEepromData=function(a){eepromData.fill(),eepromData.hexWrite("aa5533ee",0,4),eepromData.write("A0",4,encoding="ascii"),a.boardName.length>32&&(a.boardName.length=32),eepromData.write(a.boardName,6,encoding="ascii"),a.version.length>4&&(a.version.length=4),eepromData.write(a.version,38,encoding="ascii"),a.manufacturer.length>16&&(a.manufacturer.length=16),eepromData.write(a.manufacturer,42,encoding="ascii"),a.partNumber.length>16&&(a.partNumber.length=16),eepromData.write(a.partNumber,58,encoding="ascii"),eepromData.writeUint16BE(a.numPins,74,"ascii"),a.serialNumber.length>12&&(a.serialNumber.length=12),eepromData.write(a.serialNumber,76,encoding="ascii"),eepromData.writeUint16BE(a.currentVDD_3V3EXP,236),eepromData.writeUint16BE(a.currentVDD_5V,238),eepromData.writeUint16BE(a.currentSYS_5V,240),eepromData.writeUint16BE(a.DCSupplied,242);for(pin in a.mux)if(bone[pin].eeprom){var b=2*bone[pin].eeprom+88,c=a.mux[pin],d=0;switch("used"==c.used&&(d|=32768),c.direction){case"in":d|=8192;break;case"out":d|=16384;break;case"bidir":d|=24576;break;default:d|=8192}"slow"==c.slew&&(d|=64),"enabled"==c.rx&&(d|=32);var e=(24&d)>>3;switch(c.pullup){case"disabled":d|=8;break;case"pullup":d|=16;break;case"pulldown":break;default:console.error("Unknown pullup value: "+e)}d|=7&c.mode,eepromData.writeUint16BE(d,b)}return a.additional.length>156&&(a.additional.length=156),eepromData.write(a.additional,244,encoding="ascii"),eepromData},defaultEepromFiles={"/sys/devices/ocp.2/44e0b000.i2c/i2c-0/0-0050/eeprom":{type:"bone"},"/sys/devices/ocp.2/4819c000.i2c/i2c-1/1-0054/eeprom":{type:"bone"},"/sys/devices/ocp.2/4819c000.i2c/i2c-1/1-0055/eeprom":{type:"cape"},"/sys/devices/ocp.2/4819c000.i2c/i2c-1/1-0056/eeprom":{type:"cape"},"/sys/devices/ocp.2/4819c000.i2c/i2c-1/1-0057/eeprom":{type:"cape"},"test-bone.eeprom":{type:"bone"},"test-cape.eeprom":{type:"cape"}},printUsage=function(){var a='Print usage:\n\n  node bonescript/eeprom.js -h\n\n\nRead eeproms and write the output to a JSON-compatible file:\n\n  node bonescript/eeprom.js [-r [type:source.eeprom ...] destination.json] \n\n    type               : the word "bone" or "cape"\n    source.eeprom      : source eeprom file\n\n\nRead JSON eeproms file and write the output to eeprom(s):\n\n  node bonescript/eeprom.js -w source.json [[source-eeprom] destination.eeprom]\n\n    source.json        : source JSON file containing one or more eeprom structures\n    destination.eeprom : where to write the output,\n                         must either match eeprom structure name or\n                         provide a source-eeprom parameter\n    source-eeprom      : which eeprom structure to use as source\n';console.error(a)};if(!module.parent){var eeproms={};if(process.argv.shift(),process.argv.shift(),process.argv.length>0&&process.argv[0].match(/^-w/i)){var sourceJSON=process.argv.shift().substr(2),sourceEeprom="",destinationEeprom="";if(""==sourceJSON&&(sourceJSON=process.argv.shift()),process.argv.length>2)throw printUsage(),"Too many arguments";process.argv.length>0&&(sourceEeprom=destinationEeprom=process.argv.pop(),process.argv.length>0&&(sourceEeprom=process.argv.pop()));try{console.info("Reading "+sourceJSON);var jsonFile=fs.readFileSync(sourceJSON,"ascii");console.info("Parsing "+sourceJSON),debug&&console.info(jsonFile),eeproms=JSON.parse(jsonFile)}catch(ex){throw"Unable to parse "+sourceJSON+": "+ex}if(eeproms.type){if(""==destinationEeprom)throw printUsage(),"Destination must be specified if not part of the JSON file";eeproms[destinationEeprom]=eeproms}for(x in eeproms)if(""==sourceEeprom||x==sourceEeprom){if(console.warn("Writing eeprom "+x),"cape"!=eeproms[x].type)throw'Only type "cape" is currently handled';fillCapeEepromData(eeproms[x]),debug&&console.log(util.inspect(eepromData,!0,null)),""==destinationEeprom?fs.writeFileSync(x,eepromData):(console.warn("Writing to file "+destinationEeprom),fs.writeFileSync(destinationEeprom,eepromData))}else console.warn("Skipping eeprom "+x)}else if(0==process.argv.length||process.argv.length>0&&process.argv[0].match(/^-r/i)){var destinationJSON="",eepromsToRead=defaultEepromFiles;if(process.argv.length>0&&(destinationJSON=process.argv.shift().substr(2),""==destinationJSON&&(destinationJSON=process.argv.pop())),process.argv.length>0)for(eepromsToRead={};process.argv.length>0;){var eepromFile=process.argv.shift().split(":");if(2!=eepromFile.length)throw printUsage(),"Source eeproms must be of the format <type>:<file>";eepromsToRead[eepromFile[1]]={type:eepromFile[2]}}var eeproms=readEeproms(eepromsToRead);if(eeproms=={})console.info("No valid EEPROM contents found");else{var eepromsString=JSON.stringify(eeproms,null,2);""==destinationJSON?console.log(eepromsString):(console.info("Writing JSON file to "+destinationJSON),fs.writeFileSync(destinationJSON,eepromsString))}}else printUsage()}